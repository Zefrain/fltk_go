# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go build

env:
  ProductName: fltk_go

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  Release:
    runs-on: ubuntu-latest
    outputs:
      UPLOAD_URL: ${{ steps.stepCreateRelease.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest tag
        run: |
          echo "LATEST_TAG=$(git tag | grep -v '^latest$' | sort -V | tail -n1)" >> ${GITHUB_ENV}

      - name: Bump version and push tag
        id: tag-version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          tag_prefix: ""
          custom_tag: ${{ env.LATEST_TAG }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Step GitHub release
        id: stepCreateRelease
        uses: ncipollo/release-action@v1
        with:
          skipIfReleaseExists: 'true'
          tag: ${{ env.LATEST_TAG }}
          name: ${{ env.LATEST_TAG }}

  BuildExampleProject:
    runs-on: ${{ matrix.os }}
    needs: Release
    strategy:
      matrix:
        os: [macos-latest, windows-2022]
    steps:
      - name: CheckOut
        uses: actions/checkout@v4

      - name: Set APP_VERSION env
        if: runner.os == 'Linux' || runner.os == 'macOS'
        shell: bash
        run: |
          echo "APP_VERSION=$(echo ${GITHUB_REF} | rev | cut -d'/' -f 1 | rev)" >> $GITHUB_ENV

      - name: Set APP_VERSION env on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ref = "${env:GITHUB_REF}"
          $app_version = $ref.Split('/')[-1]
          "APP_VERSION=$app_version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.18.0'

      - name: build for macOS GUI
        if: runner.os == 'macOS'
        run: |
          brew install FiloSottile/musl-cross/musl-cross
          brew install create-dmg
          brew install mingw-w64
          echo "MUSL_CROSS_ROOT=$(brew --prefix musl-cross)" >> $GITHUB_ENV
          echo "PATH=${MUSL_CROSS_ROOT}/bin:$PATH" >> $GITHUB_ENV
          echo "MINGW_ROOT=$(brew --prefix mingw-w64)" >> $GITHUB_ENV
          echo "PATH=${MINGW_ROOT}/bin:$PATH" >> $GITHUB_ENV
          cd ./examples
          chmod a+x ./build_example.sh
          ./build_example.sh
          ./build_example.sh test

      - name: Install Chocolatey
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path "C:\ProgramData\Chocolatey\bin\choco.exe") {
            Write-Host "Chocolatey already installed, skipping installation"
            choco --version
          } else {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          # 确保 PATH 包含 Chocolatey
          $env:PATH = "C:\ProgramData\Chocolatey\bin;$env:PATH"
          echo "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # 导入 Chocolatey PowerShell 模块（可选）
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1 -ErrorAction SilentlyContinue

      - name: Install 7z and jq
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Get-Command 7z -ErrorAction SilentlyContinue) {
            Write-Host "7z already installed"
          } else {
            choco install 7zip
          }
          if (Get-Command jq -ErrorAction SilentlyContinue) {
            Write-Host "jq already installed"
          } else {
            choco install jq
          }

      - name: Install Mesa For Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          MESA_PATH=$(cygpath -w "${{ github.workspace }}/mesa")
          mkdir -p "$MESA_PATH"
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/pal1000/mesa-dist-win/releases/latest > latest_release.json
          ASSET_URL=$(jq -r '.assets[] | select(.name | test("mesa3d-.*-release-mingw\\.7z")) | .browser_download_url' latest_release.json)
          if [ -z "$ASSET_URL" ]; then
            echo "Error: No mesa3d-*-release-mingw.7z asset found in latest release"
            exit 1
          fi
          curl -L -o mesa.7z "$ASSET_URL"
          7z x mesa.7z -o"$MESA_PATH"
          mv "$MESA_PATH/x64/"* "$MESA_PATH/" || echo "No x64 directory found, assuming flat structure"
          rm -rf "$MESA_PATH/x64" || true
          ls -l "$MESA_PATH"
          echo "MESA_PATH=$MESA_PATH" >> $GITHUB_ENV
          echo "PATH=$MESA_PATH;$PATH" >> $GITHUB_ENV
          echo "GALLIUM_DRIVER=llvmpipe" >> $GITHUB_ENV

      - name: Verify Mesa Installation
        if: runner.os == 'Windows'
        shell: bash
        run: |
          MESA_PATH=$(cygpath -w "${{ github.workspace }}/mesa")
          if [ -d "$MESA_PATH" ]; then
            ls -l "$MESA_PATH"
          else
            echo "Error: Mesa directory not found"
            exit 1
          fi
          echo "Contents of workspace:"
          ls -l "${{ github.workspace }}"

      - name: Set up MSYS2 environment
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Get-Command msys2 -ErrorAction SilentlyContinue) {
            Write-Host "MSYS2 already installed"
          } else {
            choco install msys2
          }
          refreshenv
          C:\tools\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm"
          C:\tools\msys64\usr\bin\bash.exe -lc "pacman -S --noconfirm base-devel mingw-w64-x86_64-toolchain git mingw-w64-x86_64-cmake"
          echo "C:\tools\msys64\mingw64\bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify windres and cpp
        if: runner.os == 'Windows'
        shell: bash
        run: |
          which windres
          windres --version
          which cpp
          cpp --version || echo "cpp not found"

      - name: Build for Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          cd ./examples
          chmod a+x ./build_example.sh
          ./build_example.sh
          ./build_example.sh test

      - name: Upload binaries For windows
        if: runner.os == 'Windows'
        id: upload_file_to_release_normal
        uses: george012/upload_github_release_assets_action@latest
        with:
          path: ./examples/build/upload_tmp_dir/*.zip

      - name: Upload binaries For Mac
        id: upload_file_to_release_mac
        if: runner.os == 'MacOS'
        uses: george012/upload_github_release_assets_action@latest
        with:
          path: ./examples/build/upload_tmp_dir/*.dmg

  RemoveOldRelease:
    runs-on: ubuntu-latest
    needs: BuildExampleProject
    steps:
      - name: install github-cli
        run: |
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: CheckOut
        uses: actions/checkout@v4

      - name: Set APP_VERSION env
        run: |
          APP_VERSION=$(echo ${GITHUB_REF} | rev | cut -d'/' -f 1 | rev ) \

          function get_pre_del_tag {
              local v_str=$1
              baseStr=$(echo $v_str | cut -d'.' -f1)
              base=${baseStr//v/}
              major=$(echo $v_str | cut -d'.' -f2)
              minor=$(echo $v_str | cut -d'.' -f3)

              if ((minor>0)); then
                  minor=$((minor-1))
              else
                  minor=999
                  if ((major>0)); then
                      major=$((major-1))
                  else
                      major=999
                      if ((base>0)); then
                          base=$((base-1))
                      else
                          echo "Error: Version cannot be decremented."
                          exit 1
                      fi
                  fi
              fi

              pre_v_no="v${base}.${major}.${minor}"
              echo $pre_v_no
          }

          APP_OLD_VERSION=$(get_pre_del_tag $(get_pre_del_tag $APP_VERSION))

          echo "Old version to remove: ${APP_OLD_VERSION}"
          echo APP_OLD_VERSION=${APP_OLD_VERSION} >> ${GITHUB_ENV}

      - name: Remove Old Release
        run: |
          gh release delete ${{ env.APP_OLD_VERSION }} -y
          git push origin --delete ${{ env.APP_OLD_VERSION }}
        env:
          GH_TOKEN: ${{ github.token }}