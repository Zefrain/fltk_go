name: Release_Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      UPLOAD_URL: ${{ steps.stepCreateRelease.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest tag
        run: |
          echo "LATEST_TAG=$(git tag | grep -v '^latest$' | sort -V | tail -n1)" >> $GITHUB_ENV

      - name: Bump version and push tag
        id: tag-version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          tag_prefix: ""
          custom_tag: ${{ env.LATEST_TAG }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Step GitHub release
        id: stepCreateRelease
        uses: ncipollo/release-action@v1
        with:
          skipIfReleaseExists: 'true'
          tag: ${{ env.LATEST_TAG }}
          name: ${{ env.LATEST_TAG }}

  Build:
    runs-on: ${{ matrix.os }}
    needs: release
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - name: CheckOut
        uses: actions/checkout@v4

      - name: Set APP_VERSION env
        if: runner.os == 'Linux' || runner.os == 'macOS'
        shell: bash
        run: |
          echo "APP_VERSION=$(echo ${GITHUB_REF} | rev | cut -d'/' -f 1 | rev)" >> $GITHUB_ENV

      - name: Set APP_VERSION env on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ref = "${env:GITHUB_REF}"
          $app_version = $ref.Split('/')[-1]
          "APP_VERSION=$app_version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.18.0'

      - name: build for macOS GUI and Linux agent
        if: runner.os == 'macOS'
        run: |
          brew install FiloSottile/musl-cross/musl-cross
          brew install create-dmg
          brew install mingw-w64
          echo "MUSL_CROSS_ROOT=$(brew --prefix musl-cross)" >> $GITHUB_ENV
          echo "PATH=${MUSL_CROSS_ROOT}/bin:$PATH" >> $GITHUB_ENV
          echo "MINGW_ROOT=$(brew --prefix mingw-w64)" >> $GITHUB_ENV
          echo "PATH=${MINGW_ROOT}/bin:$PATH" >> $GITHUB_ENV
          cd ./examples
          chmod a+x ./build_example.sh
          ./build_example.sh
          ./build_example.sh test

      - name: Install Mesa For Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $MESA_PATH = "${{ github.workspace }}\mesa"
          New-Item -ItemType Directory -Path $MESA_PATH -Force | Out-Null
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/pal1000/mesa-dist-win/releases/latest" -Headers @{ Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}"; Accept = "application/vnd.github.v3+json" }
          $ASSET_URL = $release.assets | Where-Object { $_.name -match "mesa3d-.*-release-msvc\.7z" } | Select-Object -ExpandProperty browser_download_url
          if (-not $ASSET_URL) {
            Write-Error "Error: No mesa3d-*-release-mingw.7z asset found"
            exit 1
          }
          Invoke-WebRequest -Uri $ASSET_URL -OutFile "mesa.7z"
          7z x mesa.7z -o"$MESA_PATH"
          if (Test-Path "$MESA_PATH\x64") {
            Move-Item "$MESA_PATH\x64\*" "$MESA_PATH" -Force
            Remove-Item "$MESA_PATH\x64" -Recurse -Force
          }
          Get-ChildItem $MESA_PATH
          if (-not (Test-Path "$MESA_PATH\opengl32.dll")) {
            Write-Error "Error: opengl32.dll not found in $MESA_PATH"
            exit 1
          }

      - name: Verify Mesa Installation
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $MESA_PATH = "${{ github.workspace }}\mesa"
          if (-not (Test-Path $MESA_PATH)) {
            Write-Error "Error: Mesa directory not found"
            exit 1
          }
          Write-Host "Mesa contents:"
          Get-ChildItem $MESA_PATH

      - name: Set up MSYS2 environment
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install msys2
          C:\tools\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm"
          C:\tools\msys64\usr\bin\bash.exe -lc "pacman -S --noconfirm base-devel mingw-w64-x86_64-headers mingw-w64-x86_64-crt git mingw-w64-x86_64-cmake"
          C:\tools\msys64\usr\bin\bash.exe -lc "curl -O https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-binutils-2.42-2-any.pkg.tar.zst && pacman -U --noconfirm mingw-w64-x86_64-binutils-2.42-2-any.pkg.tar.zst"
          C:\tools\msys64\usr\bin\bash.exe -lc "curl -O https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-gcc-14.1.0-3-any.pkg.tar.zst && pacman -U --noconfirm mingw-w64-x86_64-gcc-14.1.0-3-any.pkg.tar.zst"
          echo "C:\tools\msys64\mingw64\bin;$env:PATH" | Out-File -Encoding ASCII -Append $env:GITHUB_PATH

      - name: Build for Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "MESA_PATH=${{ github.workspace }}/mesa" >> $GITHUB_ENV
          echo "PATH=${MESA_PATH};$PATH" >> $GITHUB_ENV
          cd ./examples
          chmod a+x ./build_example.sh
          ./build_example.sh
          ./build_example.sh test

      - name: Upload examples binaries Linux and windows
        id: upload_file_to_release_normal
        uses: george012/upload_github_release_assets_action@latest
        with:
          path: ./examples/build/upload_tmp_dir/*.zip

      - name: Upload examples binaries For Mac
        id: upload_file_to_release_mac
        if: runner.os == 'MacOS'
        uses: george012/upload_github_release_assets_action@latest
        with:
          path: ./examples/build/upload_tmp_dir/*.dmg

  RemoveOldRelease:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: install github-cli
        run: |
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: CheckOut
        uses: actions/checkout@v4

      - name: Set APP_VERSION env
        run: |
          APP_VERSION=$(echo ${GITHUB_REF} | rev | cut -d'/' -f 1 | rev ) \

          function get_pre_del_tag {
              local v_str=$1
              baseStr=$(echo $v_str | cut -d'.' -f1)
              base=${baseStr//v/}
              major=$(echo $v_str | cut -d'.' -f2)
              minor=$(echo $v_str | cut -d'.' -f3)

              if ((minor>0)); then
                  minor=$((minor-1))
              else
                  minor=999
                  if ((major>0)); then
                      major=$((major-1))
                  else
                      major=999
                      if ((base>0)); then
                          base=$((base-1))
                      else
                          echo "Error: Version cannot be decremented."
                          exit 1
                      fi
                  fi
              fi

              pre_v_no="v${base}.${major}.${minor}"
              echo $pre_v_no
          }

          APP_OLD_VERSION=$(get_pre_del_tag $(get_pre_del_tag $APP_VERSION))

          echo "Old version to remove: ${APP_OLD_VERSION}"
          echo APP_OLD_VERSION=${APP_OLD_VERSION} >> ${GITHUB_ENV}

      - name: Remove Old Release
        run: |
          gh release delete ${{ env.APP_OLD_VERSION }} -y
          git push origin --delete ${{ env.APP_OLD_VERSION }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
